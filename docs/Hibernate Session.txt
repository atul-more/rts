29th December, 2017	Hibernate 5	
3:00PM – 5:00PM	
Sabari Balaji	https://techmglobal.webex.com/mw3000/mywebex/default.do?siteurl=techmglobal&service=0
	574 975 464
2nd January, 2018	Hibernate 5	
3:00PM – 5:00PM	
Sabari Balaji	https://techmglobal.webex.com/mw3000/mywebex/default.do?siteurl=techmglobal&service=0
	574 975 464
3rd January , 2018	Hibernate5	
3:00PM – 5:00PM	
Sabari Balaji	https://techmglobal.webex.com/mw3000/mywebex/default.do?siteurl=techmglobal&service=0
	574 975 464
4th January, 2018	Hibernate 5	
3:00PM – 5:00PM	
Sabari Balaji	https://techmglobal.webex.com/mw3000/mywebex/default.do?siteurl=techmglobal&service=0
	574 975 464

	
Hibernate Session:

Architecure:

App Layer : Persistence Object
Hibernate Layer
	- hibernate.properties or hibernate.cfg.xml
	- SessionFactory
	- Session
	- Transaction (DML) & Query (QML) - Query Manipulation Language
Database Layer

How Hibernate identifies obj to persist?
@Entity annotation



	- Create Maven basic project.
	- Edit pom file to add dependecies:
		org.hibernate hibernate-core and org.hibernate.common hibernate-commons-annotations
		they internally add sub-dependencies.

	<dependencies>
      <dependency>
          <groupId>org.hibernate</groupId>
          <artifactId>hibernate-core</artifactId>
          <version>5.2.5.Final</version>
      </dependency>
      <dependency>
          <groupId>org.hibernate.common</groupId>
          <artifactId>hibernate-commons-annotations</artifactId>
          <version>5.0.1.Final</version>
      </dependency>
	</dependencies>
	
	- Create property files (.xml or .properties)
		- One xml for one DB.
		- hibernate.hbm2ddl.auto=true -> will drop and create again the mapped entity tables. Remaining db tables won't be dropped. 
		
		Ex:
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE hibernate-configuration PUBLIC
				"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
				"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

		<hibernate-configuration>
			<session-factory name = "dbSession">
				
				<!-- Datasource  -->
				<property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
				<property name="hibernate.connection.url">jdbc:oracle:thin:@zldv4088.vci.att.com2:1524:d1c1d130</property>
				<property name="hibernate.connection.username">pdts</property>
				<property name="hibernate.connection.password">d1pwd_chngSep16</property>
				<property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
				<property name="hibernate.hbm2ddl.auto">none</property>
				<property name="show_sql">true</property>
			
			</session-factory>
		</hibernate-configuration>
	- Create Hibernate Utility 
		- To build SessionFactory, you need a ServiceRegistry.
		- ServiceRegistry can be built using StandardServiceRegistryBuilder. Uses cfg.xml file as input => can have any name for the config file.
		
			Configuration config = new Configuration();
			
			//Build Service Registry => will help us to get the SessionFactory
			StandardServiceRegistryBuilder ssrb = new StandardServiceRegistryBuilder();
			ssrb.configure("hibernate.cfg.xml"); //Can have any name to the xml properties file
			ServiceRegistry serviceRegistry = ssrb.build();	
			sessionFactory = config.buildSessionFactory(serviceRegistry); 
		
		- SessionFactory object should be defined as Private and needs a public method to return the SessionFactory. It can be marked as static to avoid creating object of Utility class. Ex. - public static SessionFactory getSessionFactory()
		
	- Create Entity class
		- Bean or POJO class annotated with @Entity (javax.persistence.Entity - JPA related).
		- Should have an Id field annotated with @Id.
	- Create app class and contact DB
		- Get SessionFactory using Static method from Hibernate Utility.
		- Initialize entity and call 
			Session session = sessionFactory.openSession();
			Transaction tx = session.beginTransaction();
			
			Project p1 = new Project(1, "Test Project", "Test Owner", 150.50f);
			session.save(p1);
		- Save in like INSERT INTO. You need to use session.update(obj1) when updating a row. 
	
