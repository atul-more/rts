start		end			Project			Duration
Sep-2005	Feb-2008	INFORMe			2 Yrs 5 Months		CF 5, SQL Server 2005, HTML, JS, CSS
Mar-2008	Apr-2010	FaME - WMIG-ED	2 Yrs 1 Month		Core Java, J2EE (Servlets, Web Services, EJBs, Hibernate, JUnit), Oracle PL-SQL 10g, WLS 8, SVN, Ant
May-2010	Nov-2013	ATT CCT			3 Yrs 6 Months		CF 8, SQL Server 2008, MS SSIS, MS VB, HTML, JS, CSS, Core Java, Unix Solaris 9 (Shell Scripting),
															Putty, CVS, Rally, CAST, Oracle PL-SQL 11g, Maven
Dec-2013	Jul-2017	ATT CARE SCA	3 Yrs 7 Months		Core Java, J2EE (JSP, Servlets, Struts 1, Struts 2, JUnit 4), Oracle PL-SQL 11g, WLS 12C, SVN, 
															U/L Shell Scripting, CF 8, SQL Server 2008, MS SSIS, Sonar, Rally, CAST, Maven, Putty, JBOSS EAP 6, Jenkins, Spring-boot, MicroServices, Jenkins, HTML5, CSS3, AngularJS, Bootstrap.

Skills	Exp (as on Aug-17)

CF							6.5 Yrs		80 Months
SQL Server					7.5 Yrs		90 Months
SSIS						5 Yrs		60 Months
CoreJava, Oracle PL/SQL		7 Yrs		84 Months
J2EE, Maven, ShellScript	6 Yrs		72 Months
Spring-boot MicroServices	0.75 Yrs	8 Months


Core Java, J2EE (JSP, Servlets, Struts, Web Services, Junit)
Oracle PL-SQL, MS SQL Server, T-SQL, PostgreSQL
HTML, AngularJS, Bootstrap, CSS, ColdFusion
Spring Boot, MicroServices Architecture
Unix/Linux Shell Scripting
Jenkins, Maven, Sonar, Rally
Agile methodology
WebLogic 12C, JBOSS EAP 6

Mobility Wireless



SRS/PAR (Service Reporting System/Personal Accountability Report) is customer service reporting tool which provides call center personnel with a one stop shop to monitor call handling performance and quality statistics. By combining ACD data with customer satisfaction measurements, it gives a clear picture of opportunities for improvement. 
PDTS (Personal Development Tracking System) is a tool created to standardize, track and report on coaching/training and discipline interactions between employees and their supervisors. It provides a better experience for managers and employees by helping to capture coaching discussions and performance topics. With extensive reporting options, it also serves as an effective tool to insulate AT&T resources against legal claims made in regards to past performance and specific individual/supervisor responsibility.  

Sal: 8.09 L/Annum
CTC: 7.9 (7.1 Fix; 79K Var)
With Gratuity & Medical Insurance: 8.09



SCA – Sales Compensation Performance Management is a set of 4 applications in ATT, TechM is responsible for doing Maintenance & Enhancement for the application.
The Scope, technology for all 4 applications varies as per the Client requirements. 
Details mentioned below.

Application	Description	Technology
 A	Sales Compensation for Lightspeed (SC4LS) (MOTS ID – 10248)	Informatica, Oracle, Teradata, UNIX
 B	SRS-PAR (SRS Personal Accountability Reporting System) (MOTS ID – 17254)	MS SQL , Cold fusion
C	PDTS (Personal Development Tracking System)
(MOTS ID – 17733)	Java, J2EE, Oracle
 D	Q-RAS (Q-nomy Retail Appointment Scheduler) (MOTS 21941)	.NET , MS SQL 

Customer Domain	Sales Compensation and performance Management, Retails Appointment Scheduling.

•	The project SCA is to have a combination of application clubbed together to perform task independently. 
•	SC4LS application is used to calculate compensation benefits for call centre agent.
•	SRS application is response to the Personal Accountability Reporting initiative, and is intended to provide individual customer service agent’s daily feedback on their performance meeting standard call centre metrics.
•	PDTS application capture daily Human Resource and Legal discussion and discipline performance data via electronic storage instead of paper based files.
•	Q-RAS application is used to create online appointment to ATT retails stores for ATT Customer.


To-do

How to take thread dump - JStack, JMC, JVisualVM, JCMD, ThreadMXBean interface, Kill -3 (Unix), Ctrl + Break (Windows)
Covarient return type

----------------------------------------

http://www.journaldev.com/1330/java-collections-interview-questions-and-answers
http://www.java2novice.com/java_interview_questions/create-immutable-class/

<%@ taglib uri="" prefix="" %>

Copy?
A reference copy, as the name implies, creates a copy of a reference variable pointing to an object.

An object copy creates a copy of the object itself.

hashCode() method is used to get the hash Code of an object. hashCode() method of object class returns the memory reference of object in integer form. In HashMap, hashCode() is used to calculate the bucket and therefore calculate the index.

equals method is used to check that 2 objects are equal or not. HashMap uses equals() to compare the key whether the are equal or not.

A bucket is one element of HashMap array. It is used to store nodes. Two or more nodes can have the same bucket. In that case link list structure is used to connect the nodes. A single bucket can have more than one nodes, it depends on hashCode() method. The better your hashCode() method is, the better your buckets will be utilized.

Index Calculation in Hashmap:
Hash code of key may be large to create an array => may cause outOfMemoryException. Hence, we generate index to minimize the size of array. 
index = hashCode(key) & (n-1); where n is number of buckets or the size of array. 16 is the default size.

--------------------------------

Multiple languages support functional programming like java, javascript, scala etc. 

It implies that the local scope of a variable can't be changed. Related to Anonymous class method implementation in java.

Anonymous class (inner class)-> a class that doesn't carry a name in it. Always map to a reference of an interface or abstract class. Provides support for functional programming.

Lambda's => functional programming with ease. Lambda's => Expressiveness. Since Java 1.8.

Target Typing => Passing Lambda syntax as a param to a method

new functional interfaces available java.util.function pacakge.
Predicate
Consumer 


How to install Angular 2 with the help of proxy:

pre-requisite:
npm config set proxy http://"user:P@ssword"@proxy.server:80
npm config set https-proxy http://"user:P@ssword"@proxy.server:80
npm config set proxy http://"mp0029364:techm123%24%40"@10.30.0.155:80
http://www.ascii.cl/htmlcodes.htm
The chennai proxy server's IP is 10.30.0.155


Using quick start:
1. Download quick-start master
2. npm install    //To install packages in package.json
3. npm start

Using Angular CLI:
1. npm install -g @angular/cli
2. ng new my-app
3. cd my-app
4. ng serve -o

---------------------------------------

How to take threadDump
Issues with Unix Kill -3 way
Server hanging - how to handle it
	


How to count no of threads
Abstraction vs Encapsulation
Abstraction example - normal class, abstract class, interface
Polymorphism example
How to runtime call a method passing just the object of a class
ArrayList vs HashMap
How to use ArrayList for storing Employee objects

---------------------------------------

Which java features have you used in your application

> Core Java coding - interfaces, beans, utils, dao layers; String functions, StringBuffer/Builder, POJOs, Date functions, Exception Handling, Static Functions like isNull, isNumeric etc., Generics, Collection APIs (like HashMap, ArrayList etc.)
> File I/O - for properties or config, writing contents to excel or pdf other files.
> Log4J Logging
> Apache APIs - for String functions (StringUtils), Validating email address (EmailValidator),POI API (XSSFWorkbook) for excel file generation.
> JDBC APIs - Read Config from DB, Run procs through callable statements & get results, run report queries & process them etc.
> javax.crypto.Cipher API for pwd encryption
> Servlets - for realizing app functions (ex. generating PDF file; loading meta data)
> JSPs, JSPFs etc. (& related tag libraries, display tage lib & decorator classes) for view logic for Struts 1 & Struts 2 framework
> JNDI lookup for App Server resources - data sources, jms queues etc.
--------------------------------------
JSPF means?
JSP Fragments can be compared to server side includes. These fragments are not compiled on their own, however there are compiled along side the page in which its included. JSPF files can be thought of as a first step in refactoring large JSP pages.
--------------------------------------

Callable Statement use in PDTS?

1. Prepare a Call to a Stored Proc & Execute it.
2. Can set params to be passed to the proc.
3. Can register out param (of varchar or cursor type) - Can retrieve cursor as resultset & process it.
4. Cursor type needs to be defined in SPEC of package - like "TYPE followUp_cursor IS REF CURSOR;"

Using REF CURSOR s is one of the most powerful, flexible, and scalable ways to return query results from an Oracle Database to a client application. A REF CURSOR is a PL/SQL data type whose value is the memory address of a query work area on the database. In essence, a REF CURSOR is a pointer or a handle to a result set on the database.

A REF CURSOR involves an additional database round-trip. While the REF CURSOR is returned to the client, the actual data is not returned until the client opens the REF CURSOR and requests the data. Note that data is not be retrieved until the user attempts to read it.

A REF CURSOR is not updatable. The result set represented by the REF CURSOR is read-only. You cannot update the database by using a REF CURSOR.

A REF CURSOR is not backward scrollable. The data represented by the REF CURSOR is accessed in a forward-only, serial manner. You cannot position a record pointer inside the REF CURSOR to point to random records in the result set.

A REF CURSOR refers to a memory address on the database. Therefore, the client must be connected to the database during the lifetime of the REF CURSOR in order to access it.

-------------------------------------
Any perf tuning work done

In the current project - none as the applications were not expecting any performance issues except for the query tuning at some places. That were taken care by the DBA team. I was just involved to take care of a memory leak when DBA highlighted some long open app user sessions. 

There was a performance test team in my earlier assignment. They used to stress test the app for any performance issues. And we were handling them if any. As a part of that only, I migrated one soap based web app to axis 2 web service based web app.

Otherwise, I was just following some of the standards that were set to avoid performance issues.

Define or follow Guidelines:
 - Set a goal: like maximum concurrent users the application will support for a given limit on response times; the response times should not increase more than 10 percent during the peak hour of user load.
 
 - Identify problem areas: A little investigation into problems might reveal the specific component that causes poor performance. For example, if the CPU usage on an application server is high, you will want to focus on tuning the application server first.
 
 - Follow a methodical and focused path: try to make changes that are expected to have the biggest impact on performance. Your time is better spent tuning a method that takes 10 seconds but gets called 100 times than tuning a method that takes one minute but gets called only once. 

Stress tools - Many different stress tools are available in the market today.
Performance monitors - Using a monitoring tool, you collect data for various system performance indicators for all the appropriate nodes in your network topology. Many stress tools also provide monitoring tools.

Environment tuning: 
 - A J2EE application environment usually consists of an application server, Web server, and a backend database.
 - Web/App Server: most important setting for your Windows Apache HTTP Server is the option for number of threads. This value should be high enough to handle the maximum number of concurrent users, but not so high that it starts adding its own overhead of too many context switches. The optimum value can be determined by monitoring the number of threads in use during peak hours. The JVM performs best with the fewest busy threads. A good starting point for threadcount can be found with the following equations.
	(Number of Java Execution Threads) = Number of Transactions / Time(in seconds)
	or
	(Number of Execution Threads)=Throughput(transactions/sec)
 Other tuning options: Do not load unnecessary modules; Try to minimize logging as much as possible; Use the latest Java version.
 Heap Size: Keep its value optimum. If you still run out of memory, look into your application design to reduce memory usage, identify any memory leaks, or try various garbage collector options in the JVM.
 - Database Tuning: 
	- Run DB Server on dedicated instead of shared machine. 
	- Keep your application database and your temporary database on different hard disks. 
	- Consider taking local backups and moving them to a different machine. The backups should complete much faster. 
	- Normalize your database to the third normal form. This is usually the best compromise, as the fourth and fifth forms of normalization can result in performance degradation.
 - Application Tuning: 
	- Explicitly assigning a null value to variables that are no longer needed helps the garbage collector to easily identify the parts of memory that can be safely reclaimed. While Java automates memory management, it does not prevent usage of excessive amounts of memory or memory leaks.
	- Do not synchronize code blocks or methods unless synchronization is required. Keep synchronized blocks or methods as short as possible to avoid scalability bottlenecks.
	- Only declare methods as final when absolutely necessary: Modern optimizing dynamic compilers can perform inlining and other inter-procedural optimizations, even if Java methods are not final. If you are absolutely certain that a method must not be overridden, use the final keyword.
	- Declare constants as static final: The dynamic compiler can perform some constant folding optimizations easily, when the hint is provided.
	- Avoid finalizers: Adding finalizers to your code makes the garbage collector more expensive and unpredictable. Finalizers may not always be executed, before the program exits. Releasing critical resources in finalize() methods may lead to unpredictable application behavior.
	- Declare method arguments final if they are not modified in the method. 
	- Use a logging mechanism (like log4j) that lets you switch off logging in the production environment to reduce logging overhead.
	- Instead of creating and destroying resources every time you need them, use a resource pool for every resource (ex. JDBC Connection, Thread) that is costly to create. The number of database connections, commonly known as a connection or resource pool, is closely tied to the number of execution threads. A rule of thumb is to match the number of database connections to the number of execute threads. Over-configuring this value could cause unnecessary overhead to the database, while under-configuring could tie up all execution threads waitingon database I/O.
	- Try to minimize the objects you store in HttpSession. Extra objects in HttpSession not only lead to more memory usage, they also add additional overhead for serialization/deserialization in case of persistent sessions.
	- Where ever possible, use RequestDispatcher.forward() instead of HttpServletResponse.sendRedirect(), as the latter involves a trip to the browser.
	- Minimize the use of SingleThreadModel in servlets so that the servlet container does not have to create many instances of your servlet.
	- Java stream objects perform better than reader/writer objects because they do not have to deal with string conversion to bytes. Use OutputStream in place of PrintWriter.
	- Reduce the default session timeout either by changing your servlet container configuration or by calling HttpSession.setMaxInactiveInterval() in your code.
	- Always add directive <%@ page session="false"%> to JSP pages where you do not need a session.
	- Use the jspInit() method to cache static data, and release them in the jspDestroy() method.
	- Use StringBuffer rather than using + operator when you concatenate multiple strings.
	- Excessive use of custom tags also may result in poor performance. Keep performance in mind while designing your custom tag library.
	- In Java, serialization and deserialization of objects is a CPU-intensive procedure and is likely to slow down your application. Use the transient keyword to reduce the amount of data serialized. Customized readObject() and writeObject() methods may be beneficial, in some cases.
	- Serialization uses reflection extensively, and this also makes it slow.
	- The Externalizable interface is provided to solve Serialization's performance problems. Make classes Externalizable on a case-by-case basis to improve performance.
	- Start the consumer before you start the producer so that the initial messages do not need to queue.
	- Close resources (e.g. connections, session objects, producers, consumers) when finished with them.
	- Choose non-durable (NON_PERSISTENT) messages wherever appropriate to avoid the persistency overhead.
	- Tune the Destination parameters: a smaller capacity increases message throughput; a higher redelivery delay and lower redelivery limit reduces the overhead.
	- Set the TimeToLive value as low as feasible (default is for messages to never expire).
	- Receive messages asynchronously with a MessageListener implementation. 
	- Use the servlet init() method to cache static data, and release them in the destroy() method.
	- Use StringBuffer rather than using + operator when you concatenate multiple strings.
	- Use the print() method rather than the println() method.
	- Use a ServletOutputStream rather than a PrintWriter to send binary data.
	- Use the application server's caching facility.
	- Session mechanisms from fastest to slowest are: HttpSession, Hidden fields, Cookies, URL rewriting, the persistency mechanism.
	- Set the session time-out value as low as possible.
	- Reduce the number of remote calls made by an application to improve performance.
	- Cache remote objects locally where possible, rather than repeatedly fetching them.	
 - SQL query optimization
	- Keep the transactions as short as possible. The longer a transaction is open, the longer it holds the locks on the resources acquired, and every other transaction must wait.
	- Do not use DISTINCT clauses unnecessarily (i.e. when you know the rows will be unique). 
	- When possible, avoid using SELECT *.
	- Consider adding indexes to those columns causing full-table scans for your queries.
	- Avoid using too many string functions (like SUBSTRING, LOWER, UPPER, and LIKE) or operators in your queries.
	- Group all related search queries in a single JDBC call. The basic idea of performance tuning in DAO layer is to reduce the number of JDBC calls.
	- Whenever your select query involves more than 6 tables, try to denormalize the table. To improve the performance, you need to reduce the number of tables. 
	- In case of batch operations, it is not a good idea to create SQL queries. SQL query will be compiled every time and then it is executed. You can use stored procedures. Stored procedures are compiled only once when they are executed for the first time.
	- Avoid using views unless it is really needed. Querying from view takes more time than directly querying from the table.
	- Try to use prepared statements as they are precompiled.
	 
Performance tuning is an ongoing process. Simply put, good system performance depends on good design, good implementation, defined performance objectives and performance tuning. Mechanisms have to be implemented that provide performance metrics which can be compared against the performance objectives defined.

-------------------------------------
What does that you do on day-to-day activity?
1. Development:
	- Coding in core java, using JDBC API, struts1 - struts2 based code update. JSPs update, Servlet updates etc.
	- Test cases writing.
	- Build code using Maven, Deploy code to WebLogic Server using Jenkins. DevOps.
	- Spring Boot, Hibernate, MicroServices based code update.
	- AngularJS for UI code. HTML5, CSS & Bootstrap.
	- Writing sql queries, updating pl-sql procedures, packages & functions etc.
	- Shell scripts - cron job script updates on App Script Server.
	- Delivery in Agile sprints.
2. Unit Test:
	- Running test cases with Maven, Jenkins.
	- Increase test coverage for existing code - struts 1 (StrutsTestCase API); struts 2 (XworkTestCase API).	
	- Manual testing and test results generation.	
3. Others:
	- Estimation
	- CFM using SVN (with tool SmartSVN).
	- Doing POCs (Proof of concepts) for different proposals using client recommended Open-Source technologies.
	- Reporting activities - report progress of team on different assignments (POCs and Project work).
-------------------------------------
Spring & Hibernate experience
I am using Spring Boot for the POC work. It's based on MicroServices architecture.

Hibernate I have used in the past project. And also is using its API with the POC work.
-------------------------------------
What part of java you like most
Spring Boot based app development has been the best thing that i had done till date. 

I like to work on value adds that can be useful to others. Not specific to any technologies. I had done few related to POCs, Build process, Test Automation, Continuous Integration and Automated Deployment using Jenkins, LoginAs Function, Log Rotation tool, Email framework.

Technologies used were - Spring Boot, AngularJS, Unix Shell Scripts, Jenkins, Maven, Struts 2 framework, Java/J2EE.
-------------------------------------
What did you do as Solution Architect
It was rather an Applicaiton Architect role.

As a Solution Architect, I was responsible to determine and propose solutions to the business problems based on the domain and app knowledge. For instance, for SRS reporting app, there was a new metrics data that Client was looking to make available on SRS UI. The high level steps involved were:
- Extracting the data from the source app.
- Making it available to SRS app to consume.
- Report on the consumed data.

My reponsibility was to define processes, practices & rules of how these activities would be done by each of the interacing apps with more focus on SRS app more.

For instance above 3 activities were proposed to be done in the following way.
1. Data extraction - source app was free to choose way of. However the mode of file transfer was CSV files over SFTP (as the Company std was use of SFTP vs FTP).
2. Data cosumption - SRS was already having a mechanism to process csv or flat files and store data to SRS DB. Asked them to either reuse existing mechanism or develop new as necessary.
3. Data Reporting - SRS had a custom report framework with which dynamic reports could be generated.
-------------------------------------
What is type erasure
Generics features
Experience with Multithreading

What is URL Rewriting





Docker implementation in SRS POC
Selenium test case writing for SRS UI



	
Difference between arraylist vector
Difference between Statement PrepareStatement
Junit Implementation ... Why didn't you use mockito
JDBC Driver used... difference
Design Patterns used.
Spring-boot explanation 
Singleton example
Unix experience
Vi command to traverse backword
Database design
Left outer join
Are you a quick learner

constraints to implement hashcode & equals method
serial


-------------------------------------------
aai's old names
Birth date - for both
place of birth - for both
pan no - for both
voter id - for both
Educational qualification - for both
Visible distinguishing mark - for both
Aadhaar Number 

names of father, mother, spouse
address (proof - 1	Water Bill, 3	Electricity bill, 12	Photo Passbook of running Bank Account (Scheduled Public Sector Banks, Scheduled Private Sector Indian Banks and Regional Rural Banks only))
living since
police station

First Reference Name and Address * Baba daji
mobile
second Reference Name and Address * Aaba Farne
mobile


For non-ECR
All persons having educational qualifications of matriculation and above	=-> Matriculation or Higher Educational Pass Certificate
All persons above the age of 50 years	--> i) Birth Certificate issued by the Municipal Authority or any office authorized to issue Birth and Death Certificate by the Registrar of Births & Deaths
			OR
		ii) School leaving certificate / Secondary School leaving certificate/ Certificate of Recognized Boards from the school last attended by the applicant or any other recognized educational institution

-------------------------------------------------